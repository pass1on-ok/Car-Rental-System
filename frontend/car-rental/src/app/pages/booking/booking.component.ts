import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { BookingService, Booking } from '../../services/booking.service';
import { CarService } from '../../services/car.service';  
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-booking',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: './booking.component.html',
  styleUrls: ['./booking.component.css']
})
export class BookingComponent implements OnInit {
  booking: Booking = {
    customer: 0,
    vehicle: 0,
    startDate: '',
    endDate: '',
  };

  message = '';
  vehicleID: number | null = null;
  vehicle: any = null;  

  constructor(
    private bookingService: BookingService,
    private carService: CarService, 
    private router: Router,
    private route: ActivatedRoute,
    private authService: AuthService
  ) {}

  ngOnInit(): void {
    
    if (!this.authService.isAuthenticated()) {
      this.message = '‚ùó –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.';
      return; 
    }

    
    this.authService.getUserProfile().subscribe({
      next: (user) => {
        this.booking.customer = user.userID; 
      },
      error: () => {
        this.message = '‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.';
        return; 
      }
    });

    
    this.route.queryParams.subscribe(params => {
      const id = params['vehicleID'];
      if (id) {
        this.booking.vehicle = +id;
        this.vehicleID = +id;

        this.carService.getVehicleById(id).subscribe(data => {
          this.vehicle = data;  
        }, error => {
          this.message = '‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ.';
        });
      } else {
        this.message = '‚ùó –ù–µ —É–∫–∞–∑–∞–Ω ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.';
      }
    });
  }

  submitBooking() {
    if (!this.booking.startDate || !this.booking.endDate) {
      this.message = '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –∞—Ä–µ–Ω–¥—ã.';
      return;
    }

    const startDate = new Date(this.booking.startDate);
    const endDate = new Date(this.booking.endDate);

    if (startDate > endDate) {
      this.message = '‚ùó –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.';
      return;
    }

    if (startDate.toISOString().split('T')[0] === endDate.toISOString().split('T')[0]) {
      endDate.setDate(startDate.getDate() + 1); 
    }

    this.booking.startDate = startDate.toISOString().split('T')[0];
    this.booking.endDate = endDate.toISOString().split('T')[0];

    this.bookingService.createBooking(this.booking).subscribe({
      next: (createdBooking) => {
        this.message = '‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!';
        // –ü–µ—Ä–µ–¥–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ URL –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–ø–ª–∞—Ç—ã
        this.router.navigate(['/payment'], {
          queryParams: { bookingID: createdBooking.bookingID }
        });
      },
      error: (error) => {
        console.error(error);
        this.message = 'üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –∞–≤—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã.';
      }
    });
  }
}
